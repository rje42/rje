---
title: "Manipulating Discrete Joint Distributions"
author: "Robin Evans"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\usepackage[utf8]{inputenc}
---

### Marginal and Conditional Distributions



### Interventions

### Multiple distributions

### Reconstructing Joint Distributions

When dealing with margins of multivariate distributions, it can be
useful to be able to repeat probabilities to match the pattern of a
joint distribution.  In particular if we are given various conditional
distributions (say from a Bayesian network model), we may wish to
multiply them together to obtain the joint distribution.

For example, the model in which $X_2$ is independent of $X_3$ given
$X_1$ might be stored as the conditional probability tables $P(X_1)$,
$P(X_2 | X_1)$ and $P(X_3 | X_1)$.  In order to reconstruct the joint
distribution $P(X_1,X_2,X_3)$, one needs to multiply
$$
P(X_1=x_1,X_2=x_2,X_3=x_3)
= P(X_1=x_1) \cdot P(X_2 = x_2 | X_1=x_1) \cdot P(X_3 = x_3 | X_1=x_1),
$$
so that the values of $x_1,x_2,x_3$ match.

Because of R's vectorization, it's therefore useful to be able to
create vectors of each of the probability tables indexed by
$(x_1,x_2,x_3)$ regardless of which variables are actually represented
in the table; if a variable is not represented then values will be
repeated.  The indexing should be in reverse lexicographical order
(i.e. first index changes fastest: 000, 100, 010, 110, ..., 111),
which is the way arrays are stored in R.  

For example, if $X_1,X_2,X_3$ are all binary (i.e.\ take values in
$\{0,1\}$) then we'd have
$$
P(X_3 = 0 | X_1 = 0), \, P(X_3 = 0 | X_1 = 1), P(X_3 = 0 | X_1 = 0), \, P(X_3 = 0 | X_1 = 1)\\
P(X_3 = 1 | X_1 = 0), \, P(X_3 = 1 | X_1 = 1), P(X_3 = 1 | X_1 = 0), \, P(X_3 = 1 | X_1 = 1).
$$
Now, suppose we already have a vector for $P(X_3 = x_3 | X_1 = x_1)$
indexed by $(x_1, x_3)$ in reverse lexicographical order:
$$
P(X_3 = 0 | X_1 = 0), \, P(X_3 = 0 | X_1 = 1), P(X_3 = 1 | X_1 = 0), \, P(X_3 = 1 | X_1 = 1),
$$
we need the first and second entries repeated, followed by the third
and fourth entries:
```{r message=FALSE}
library(rje)
patternRepeat0(c(1,3), c(2,2,2))
```

`patternRepeat0()` requires us only to specify the elements present
and the dimension of the full distribution.  The existing order of the
distribution is assumed to be reverse lexicographic, regardless of the
order given in the first argument, but this can be over-ridden.

```{r}
patternRepeat0(c(3,1), c(2,2,2))
patternRepeat0(c(3,1), c(2,2,2), keep.order=TRUE)
```

Another way to think about this is that if we take the possible
indices for $X_1,X_2,X_3$ and match them to the indices of just $X_1$,
and $X_3$, `patternRepeat0()` tells is which point will be matched.

#### Example

Let's generate some conditional probability tables.
```{r}
set.seed(134)

p1 = c(rdirichlet(1,c(1,1)))
p2.1 = c(rdirichlet(2,c(1,1)))
p3.1 = c(rdirichlet(2,c(1,1)))

p12 = p1*p2.1
## get joint distribution
p123 = p12*p3.1[patternRepeat0(c(1,3), c(2,2,2))]

## put into array to verify this has correct
## conditional distribution
dim(p123) = c(2,2,2)
conditionTable(p123, 3, 1)

## can also get conditional distribution indexed by all variables
p3.1[patternRepeat0(c(1,3), c(2,2,2))]
c(conditionTable2(p123, 3, 1))
```
